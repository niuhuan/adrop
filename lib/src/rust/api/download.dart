// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../data_obj/enums.dart';
import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `clear`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`

Future<DownloadConfig?> downloadInfo() =>
    RustLib.instance.api.crateApiDownloadDownloadInfo();

Future<void> setDownloadConfigOnlyPath({required String path}) =>
    RustLib.instance.api.crateApiDownloadSetDownloadConfigOnlyPath(path: path);

Future<void> saveDownloadInfo({required DownloadConfig downloadConfig}) =>
    RustLib.instance.api
        .crateApiDownloadSaveDownloadInfo(downloadConfig: downloadConfig);

Future<String> defaultDownloadPath() =>
    RustLib.instance.api.crateApiDownloadDefaultDownloadPath();

class DownloadConfig {
  final String downloadTo;
  final AfterDownload afterDownload;
  final PlatformInt64 taskExpireEsc;

  const DownloadConfig({
    required this.downloadTo,
    required this.afterDownload,
    required this.taskExpireEsc,
  });

  static Future<DownloadConfig> default_() =>
      RustLib.instance.api.crateApiDownloadDownloadConfigDefault();

  @override
  int get hashCode =>
      downloadTo.hashCode ^ afterDownload.hashCode ^ taskExpireEsc.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DownloadConfig &&
          runtimeType == other.runtimeType &&
          downloadTo == other.downloadTo &&
          afterDownload == other.afterDownload &&
          taskExpireEsc == other.taskExpireEsc;
}
