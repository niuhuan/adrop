// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/download.dart';
import 'api/fs.dart';
import 'api/init.dart';
import 'api/nope.dart';
import 'api/receiving.dart';
import 'api/sending.dart';
import 'api/simple.dart';
import 'api/space.dart';
import 'api/system.dart';
import 'api/user.dart';
import 'api/user_setting.dart';
import 'dart:async';
import 'dart:convert';
import 'data_obj.dart';
import 'data_obj/enums.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => -461015446;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_adrop',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiDownloadDefaultDownloadPath();

  Future<DownloadConfig> crateApiDownloadDownloadConfigDefault();

  Future<DownloadConfig?> crateApiDownloadDownloadInfo();

  Future<void> crateApiDownloadSaveDownloadInfo(
      {required DownloadConfig downloadConfig});

  Future<String> crateApiFsDesktopRoot();

  Future<void> crateApiInitInitPath({required String localPath});

  Future<SelectionFile> crateApiNopeMatchSelectionFile(
      {required String name, required String path});

  Future<List<ReceivingTask>> crateApiReceivingListReceivingTasks();

  Stream<List<ReceivingTask>> crateApiReceivingRegisterReceivingTask();

  Future<void> crateApiReceivingUnregisterReceivingTask();

  Future<void> crateApiSendingAddSendingTasks(
      {required Device device, required List<SelectionFile> selectionFiles});

  Future<List<SendingTask>> crateApiSendingListSendingTasks();

  Stream<List<SendingTask>> crateApiSendingRegisterSendingListener();

  Future<void> crateApiSendingUnregisterSendingListener();

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<AdriveUserGetDriveInfo> crateApiSpaceAdriveUserGetDriveInfoDefault();

  Future<String> crateApiSpaceCheckOldPassword(
      {required String passwordEnc, required String password});

  Future<void> crateApiSpaceChooseOldDevice(
      {required String driveId,
      required String parentFolderFileId,
      required String truePassBase64,
      required String thisDeviceFolderFileId});

  Future<void> crateApiSpaceCreateFolder(
      {required String driveId,
      required String parentFolderFileId,
      required String folderName});

  Future<void> crateApiSpaceCreateNewDevice(
      {required String driveId,
      required String parentFolderFileId,
      required String truePassBase64,
      required String deviceName,
      required int deviceType});

  Future<FileItem> crateApiSpaceFileItemDefault();

  Future<String?> crateApiSpaceHasSetPassword(
      {required String driveId, required String parentFolderFileId});

  Future<List<Device>> crateApiSpaceListDevices(
      {required String driveId,
      required String parentFolderFileId,
      required String truePassBase64});

  Future<List<Device>> crateApiSpaceListDevicesByConfig();

  Future<List<FileItem>> crateApiSpaceListFolder(
      {required String driveId, required String parentFolderFileId});

  Future<AdriveUserGetDriveInfo> crateApiSpaceOauthDeriveInfo();

  Future<String> crateApiSpaceSetNewPassword(
      {required String driveId,
      required String parentFolderFileId,
      required String password});

  Future<SpaceInfo?> crateApiSpaceSpaceInfo();

  Future<void> crateApiSystemOpenByBrowser({required String url});

  Future<LoginInfo> crateApiUserLoginInfo();

  Future<void> crateApiUserSettingStartLoginService();

  Future<void> crateApiUserSettingStopLoginService();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiDownloadDefaultDownloadPath() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDownloadDefaultDownloadPathConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDownloadDefaultDownloadPathConstMeta =>
      const TaskConstMeta(
        debugName: "default_download_path",
        argNames: [],
      );

  @override
  Future<DownloadConfig> crateApiDownloadDownloadConfigDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_download_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDownloadDownloadConfigDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDownloadDownloadConfigDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "download_config_default",
        argNames: [],
      );

  @override
  Future<DownloadConfig?> crateApiDownloadDownloadInfo() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_download_config,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDownloadDownloadInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDownloadDownloadInfoConstMeta =>
      const TaskConstMeta(
        debugName: "download_info",
        argNames: [],
      );

  @override
  Future<void> crateApiDownloadSaveDownloadInfo(
      {required DownloadConfig downloadConfig}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_download_config(downloadConfig, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDownloadSaveDownloadInfoConstMeta,
      argValues: [downloadConfig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDownloadSaveDownloadInfoConstMeta =>
      const TaskConstMeta(
        debugName: "save_download_info",
        argNames: ["downloadConfig"],
      );

  @override
  Future<String> crateApiFsDesktopRoot() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiFsDesktopRootConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFsDesktopRootConstMeta => const TaskConstMeta(
        debugName: "desktop_root",
        argNames: [],
      );

  @override
  Future<void> crateApiInitInitPath({required String localPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(localPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiInitInitPathConstMeta,
      argValues: [localPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitInitPathConstMeta => const TaskConstMeta(
        debugName: "init_path",
        argNames: ["localPath"],
      );

  @override
  Future<SelectionFile> crateApiNopeMatchSelectionFile(
      {required String name, required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_selection_file,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiNopeMatchSelectionFileConstMeta,
      argValues: [name, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNopeMatchSelectionFileConstMeta =>
      const TaskConstMeta(
        debugName: "match_selection_file",
        argNames: ["name", "path"],
      );

  @override
  Future<List<ReceivingTask>> crateApiReceivingListReceivingTasks() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_receiving_task,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiReceivingListReceivingTasksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceivingListReceivingTasksConstMeta =>
      const TaskConstMeta(
        debugName: "list_receiving_tasks",
        argNames: [],
      );

  @override
  Stream<List<ReceivingTask>> crateApiReceivingRegisterReceivingTask() {
    final listener = RustStreamSink<List<ReceivingTask>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_receiving_task_Sse(listener, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiReceivingRegisterReceivingTaskConstMeta,
      argValues: [listener],
      apiImpl: this,
    )));
    return listener.stream;
  }

  TaskConstMeta get kCrateApiReceivingRegisterReceivingTaskConstMeta =>
      const TaskConstMeta(
        debugName: "register_receiving_task",
        argNames: ["listener"],
      );

  @override
  Future<void> crateApiReceivingUnregisterReceivingTask() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiReceivingUnregisterReceivingTaskConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceivingUnregisterReceivingTaskConstMeta =>
      const TaskConstMeta(
        debugName: "unregister_receiving_task",
        argNames: [],
      );

  @override
  Future<void> crateApiSendingAddSendingTasks(
      {required Device device, required List<SelectionFile> selectionFiles}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_device(device, serializer);
        sse_encode_list_selection_file(selectionFiles, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSendingAddSendingTasksConstMeta,
      argValues: [device, selectionFiles],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendingAddSendingTasksConstMeta =>
      const TaskConstMeta(
        debugName: "add_sending_tasks",
        argNames: ["device", "selectionFiles"],
      );

  @override
  Future<List<SendingTask>> crateApiSendingListSendingTasks() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_sending_task,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSendingListSendingTasksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendingListSendingTasksConstMeta =>
      const TaskConstMeta(
        debugName: "list_sending_tasks",
        argNames: [],
      );

  @override
  Stream<List<SendingTask>> crateApiSendingRegisterSendingListener() {
    final listener = RustStreamSink<List<SendingTask>>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_sending_task_Sse(listener, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSendingRegisterSendingListenerConstMeta,
      argValues: [listener],
      apiImpl: this,
    )));
    return listener.stream;
  }

  TaskConstMeta get kCrateApiSendingRegisterSendingListenerConstMeta =>
      const TaskConstMeta(
        debugName: "register_sending_listener",
        argNames: ["listener"],
      );

  @override
  Future<void> crateApiSendingUnregisterSendingListener() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSendingUnregisterSendingListenerConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendingUnregisterSendingListenerConstMeta =>
      const TaskConstMeta(
        debugName: "unregister_sending_listener",
        argNames: [],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<AdriveUserGetDriveInfo> crateApiSpaceAdriveUserGetDriveInfoDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_adrive_user_get_drive_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSpaceAdriveUserGetDriveInfoDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceAdriveUserGetDriveInfoDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "adrive_user_get_drive_info_default",
        argNames: [],
      );

  @override
  Future<String> crateApiSpaceCheckOldPassword(
      {required String passwordEnc, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(passwordEnc, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceCheckOldPasswordConstMeta,
      argValues: [passwordEnc, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceCheckOldPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "check_old_password",
        argNames: ["passwordEnc", "password"],
      );

  @override
  Future<void> crateApiSpaceChooseOldDevice(
      {required String driveId,
      required String parentFolderFileId,
      required String truePassBase64,
      required String thisDeviceFolderFileId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        sse_encode_String(truePassBase64, serializer);
        sse_encode_String(thisDeviceFolderFileId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceChooseOldDeviceConstMeta,
      argValues: [
        driveId,
        parentFolderFileId,
        truePassBase64,
        thisDeviceFolderFileId
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceChooseOldDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "choose_old_device",
        argNames: [
          "driveId",
          "parentFolderFileId",
          "truePassBase64",
          "thisDeviceFolderFileId"
        ],
      );

  @override
  Future<void> crateApiSpaceCreateFolder(
      {required String driveId,
      required String parentFolderFileId,
      required String folderName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        sse_encode_String(folderName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceCreateFolderConstMeta,
      argValues: [driveId, parentFolderFileId, folderName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceCreateFolderConstMeta => const TaskConstMeta(
        debugName: "create_folder",
        argNames: ["driveId", "parentFolderFileId", "folderName"],
      );

  @override
  Future<void> crateApiSpaceCreateNewDevice(
      {required String driveId,
      required String parentFolderFileId,
      required String truePassBase64,
      required String deviceName,
      required int deviceType}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        sse_encode_String(truePassBase64, serializer);
        sse_encode_String(deviceName, serializer);
        sse_encode_i_32(deviceType, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceCreateNewDeviceConstMeta,
      argValues: [
        driveId,
        parentFolderFileId,
        truePassBase64,
        deviceName,
        deviceType
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceCreateNewDeviceConstMeta =>
      const TaskConstMeta(
        debugName: "create_new_device",
        argNames: [
          "driveId",
          "parentFolderFileId",
          "truePassBase64",
          "deviceName",
          "deviceType"
        ],
      );

  @override
  Future<FileItem> crateApiSpaceFileItemDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_file_item,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSpaceFileItemDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceFileItemDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "file_item_default",
        argNames: [],
      );

  @override
  Future<String?> crateApiSpaceHasSetPassword(
      {required String driveId, required String parentFolderFileId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceHasSetPasswordConstMeta,
      argValues: [driveId, parentFolderFileId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceHasSetPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "has_set_password",
        argNames: ["driveId", "parentFolderFileId"],
      );

  @override
  Future<List<Device>> crateApiSpaceListDevices(
      {required String driveId,
      required String parentFolderFileId,
      required String truePassBase64}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        sse_encode_String(truePassBase64, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_device,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceListDevicesConstMeta,
      argValues: [driveId, parentFolderFileId, truePassBase64],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceListDevicesConstMeta => const TaskConstMeta(
        debugName: "list_devices",
        argNames: ["driveId", "parentFolderFileId", "truePassBase64"],
      );

  @override
  Future<List<Device>> crateApiSpaceListDevicesByConfig() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_device,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceListDevicesByConfigConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceListDevicesByConfigConstMeta =>
      const TaskConstMeta(
        debugName: "list_devices_by_config",
        argNames: [],
      );

  @override
  Future<List<FileItem>> crateApiSpaceListFolder(
      {required String driveId, required String parentFolderFileId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_file_item,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceListFolderConstMeta,
      argValues: [driveId, parentFolderFileId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceListFolderConstMeta => const TaskConstMeta(
        debugName: "list_folder",
        argNames: ["driveId", "parentFolderFileId"],
      );

  @override
  Future<AdriveUserGetDriveInfo> crateApiSpaceOauthDeriveInfo() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_adrive_user_get_drive_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceOauthDeriveInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceOauthDeriveInfoConstMeta =>
      const TaskConstMeta(
        debugName: "oauth_derive_info",
        argNames: [],
      );

  @override
  Future<String> crateApiSpaceSetNewPassword(
      {required String driveId,
      required String parentFolderFileId,
      required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(driveId, serializer);
        sse_encode_String(parentFolderFileId, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceSetNewPasswordConstMeta,
      argValues: [driveId, parentFolderFileId, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceSetNewPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "set_new_password",
        argNames: ["driveId", "parentFolderFileId", "password"],
      );

  @override
  Future<SpaceInfo?> crateApiSpaceSpaceInfo() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_space_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpaceSpaceInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpaceSpaceInfoConstMeta => const TaskConstMeta(
        debugName: "space_info",
        argNames: [],
      );

  @override
  Future<void> crateApiSystemOpenByBrowser({required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSystemOpenByBrowserConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSystemOpenByBrowserConstMeta =>
      const TaskConstMeta(
        debugName: "open_by_browser",
        argNames: ["url"],
      );

  @override
  Future<LoginInfo> crateApiUserLoginInfo() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_login_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserLoginInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserLoginInfoConstMeta => const TaskConstMeta(
        debugName: "login_info",
        argNames: [],
      );

  @override
  Future<void> crateApiUserSettingStartLoginService() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserSettingStartLoginServiceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserSettingStartLoginServiceConstMeta =>
      const TaskConstMeta(
        debugName: "start_login_service",
        argNames: [],
      );

  @override
  Future<void> crateApiUserSettingStopLoginService() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiUserSettingStopLoginServiceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUserSettingStopLoginServiceConstMeta =>
      const TaskConstMeta(
        debugName: "stop_login_service",
        argNames: [],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<List<ReceivingTask>>
      dco_decode_StreamSink_list_receiving_task_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<List<SendingTask>> dco_decode_StreamSink_list_sending_task_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AdriveUserGetDriveInfo dco_decode_adrive_user_get_drive_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AdriveUserGetDriveInfo(
      userId: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      avatar: dco_decode_String(arr[2]),
      defaultDriveId: dco_decode_String(arr[3]),
      resourceDriveId: dco_decode_opt_String(arr[4]),
      backupDriveId: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  AfterDownload dco_decode_after_download(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AfterDownload.values[raw as int];
  }

  @protected
  Device dco_decode_box_autoadd_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_device(raw);
  }

  @protected
  DownloadConfig dco_decode_box_autoadd_download_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_download_config(raw);
  }

  @protected
  SpaceInfo dco_decode_box_autoadd_space_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_space_info(raw);
  }

  @protected
  Device dco_decode_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Device(
      name: dco_decode_String(arr[0]),
      folderFileId: dco_decode_String(arr[1]),
      deviceType: dco_decode_i_32(arr[2]),
    );
  }

  @protected
  DownloadConfig dco_decode_download_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DownloadConfig(
      downloadTo: dco_decode_String(arr[0]),
      afterDownload: dco_decode_after_download(arr[1]),
      taskExpireEsc: dco_decode_i_64(arr[2]),
    );
  }

  @protected
  FileItem dco_decode_file_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FileItem(
      fileId: dco_decode_String(arr[0]),
      fileName: dco_decode_String(arr[1]),
    );
  }

  @protected
  FileItemType dco_decode_file_item_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileItemType.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<Device> dco_decode_list_device(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_device).toList();
  }

  @protected
  List<FileItem> dco_decode_list_file_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_file_item).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ReceivingTask> dco_decode_list_receiving_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_receiving_task).toList();
  }

  @protected
  List<SelectionFile> dco_decode_list_selection_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_selection_file).toList();
  }

  @protected
  List<SendingTask> dco_decode_list_sending_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sending_task).toList();
  }

  @protected
  LoginInfo dco_decode_login_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LoginInfo(
      state: dco_decode_login_state(arr[0]),
    );
  }

  @protected
  LoginState dco_decode_login_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LoginState.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  DownloadConfig? dco_decode_opt_box_autoadd_download_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_download_config(raw);
  }

  @protected
  SpaceInfo? dco_decode_opt_box_autoadd_space_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_space_info(raw);
  }

  @protected
  ReceivingTask dco_decode_receiving_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return ReceivingTask(
      taskId: dco_decode_String(arr[0]),
      driveId: dco_decode_String(arr[1]),
      fileId: dco_decode_String(arr[2]),
      fileName: dco_decode_String(arr[3]),
      filePath: dco_decode_String(arr[4]),
      fileItemType: dco_decode_file_item_type(arr[5]),
      taskState: dco_decode_receiving_task_state(arr[6]),
      errorMsg: dco_decode_String(arr[7]),
    );
  }

  @protected
  ReceivingTaskState dco_decode_receiving_task_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReceivingTaskState.values[raw as int];
  }

  @protected
  SelectionFile dco_decode_selection_file(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SelectionFile(
      name: dco_decode_String(arr[0]),
      path: dco_decode_String(arr[1]),
      fileItemType: dco_decode_file_item_type(arr[2]),
    );
  }

  @protected
  SendingTask dco_decode_sending_task(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return SendingTask(
      taskId: dco_decode_String(arr[0]),
      device: dco_decode_device(arr[1]),
      fileName: dco_decode_String(arr[2]),
      filePath: dco_decode_String(arr[3]),
      fileItemType: dco_decode_file_item_type(arr[4]),
      taskState: dco_decode_sending_task_state(arr[5]),
      errorType: dco_decode_sending_task_error_type(arr[6]),
      errorMsg: dco_decode_String(arr[7]),
      cloudFileId: dco_decode_String(arr[8]),
      currentFileUploadSize: dco_decode_i_64(arr[9]),
    );
  }

  @protected
  SendingTaskErrorType dco_decode_sending_task_error_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendingTaskErrorType.values[raw as int];
  }

  @protected
  SendingTaskState dco_decode_sending_task_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SendingTaskState.values[raw as int];
  }

  @protected
  SpaceInfo dco_decode_space_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SpaceInfo(
      driveId: dco_decode_String(arr[0]),
      devicesRootFolderFileId: dco_decode_String(arr[1]),
      thisDeviceFolderFileId: dco_decode_String(arr[2]),
      truePassBase64: dco_decode_String(arr[3]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<List<ReceivingTask>>
      sse_decode_StreamSink_list_receiving_task_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<List<SendingTask>> sse_decode_StreamSink_list_sending_task_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AdriveUserGetDriveInfo sse_decode_adrive_user_get_drive_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userId = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_avatar = sse_decode_String(deserializer);
    var var_defaultDriveId = sse_decode_String(deserializer);
    var var_resourceDriveId = sse_decode_opt_String(deserializer);
    var var_backupDriveId = sse_decode_opt_String(deserializer);
    return AdriveUserGetDriveInfo(
        userId: var_userId,
        name: var_name,
        avatar: var_avatar,
        defaultDriveId: var_defaultDriveId,
        resourceDriveId: var_resourceDriveId,
        backupDriveId: var_backupDriveId);
  }

  @protected
  AfterDownload sse_decode_after_download(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return AfterDownload.values[inner];
  }

  @protected
  Device sse_decode_box_autoadd_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_device(deserializer));
  }

  @protected
  DownloadConfig sse_decode_box_autoadd_download_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_download_config(deserializer));
  }

  @protected
  SpaceInfo sse_decode_box_autoadd_space_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_space_info(deserializer));
  }

  @protected
  Device sse_decode_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_folderFileId = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_i_32(deserializer);
    return Device(
        name: var_name,
        folderFileId: var_folderFileId,
        deviceType: var_deviceType);
  }

  @protected
  DownloadConfig sse_decode_download_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_downloadTo = sse_decode_String(deserializer);
    var var_afterDownload = sse_decode_after_download(deserializer);
    var var_taskExpireEsc = sse_decode_i_64(deserializer);
    return DownloadConfig(
        downloadTo: var_downloadTo,
        afterDownload: var_afterDownload,
        taskExpireEsc: var_taskExpireEsc);
  }

  @protected
  FileItem sse_decode_file_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fileId = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    return FileItem(fileId: var_fileId, fileName: var_fileName);
  }

  @protected
  FileItemType sse_decode_file_item_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FileItemType.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<Device> sse_decode_list_device(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Device>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_device(deserializer));
    }
    return ans_;
  }

  @protected
  List<FileItem> sse_decode_list_file_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FileItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_file_item(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ReceivingTask> sse_decode_list_receiving_task(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ReceivingTask>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_receiving_task(deserializer));
    }
    return ans_;
  }

  @protected
  List<SelectionFile> sse_decode_list_selection_file(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SelectionFile>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_selection_file(deserializer));
    }
    return ans_;
  }

  @protected
  List<SendingTask> sse_decode_list_sending_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SendingTask>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sending_task(deserializer));
    }
    return ans_;
  }

  @protected
  LoginInfo sse_decode_login_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_state = sse_decode_login_state(deserializer);
    return LoginInfo(state: var_state);
  }

  @protected
  LoginState sse_decode_login_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LoginState.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DownloadConfig? sse_decode_opt_box_autoadd_download_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_download_config(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SpaceInfo? sse_decode_opt_box_autoadd_space_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_space_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ReceivingTask sse_decode_receiving_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taskId = sse_decode_String(deserializer);
    var var_driveId = sse_decode_String(deserializer);
    var var_fileId = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    var var_fileItemType = sse_decode_file_item_type(deserializer);
    var var_taskState = sse_decode_receiving_task_state(deserializer);
    var var_errorMsg = sse_decode_String(deserializer);
    return ReceivingTask(
        taskId: var_taskId,
        driveId: var_driveId,
        fileId: var_fileId,
        fileName: var_fileName,
        filePath: var_filePath,
        fileItemType: var_fileItemType,
        taskState: var_taskState,
        errorMsg: var_errorMsg);
  }

  @protected
  ReceivingTaskState sse_decode_receiving_task_state(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ReceivingTaskState.values[inner];
  }

  @protected
  SelectionFile sse_decode_selection_file(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_path = sse_decode_String(deserializer);
    var var_fileItemType = sse_decode_file_item_type(deserializer);
    return SelectionFile(
        name: var_name, path: var_path, fileItemType: var_fileItemType);
  }

  @protected
  SendingTask sse_decode_sending_task(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_taskId = sse_decode_String(deserializer);
    var var_device = sse_decode_device(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    var var_fileItemType = sse_decode_file_item_type(deserializer);
    var var_taskState = sse_decode_sending_task_state(deserializer);
    var var_errorType = sse_decode_sending_task_error_type(deserializer);
    var var_errorMsg = sse_decode_String(deserializer);
    var var_cloudFileId = sse_decode_String(deserializer);
    var var_currentFileUploadSize = sse_decode_i_64(deserializer);
    return SendingTask(
        taskId: var_taskId,
        device: var_device,
        fileName: var_fileName,
        filePath: var_filePath,
        fileItemType: var_fileItemType,
        taskState: var_taskState,
        errorType: var_errorType,
        errorMsg: var_errorMsg,
        cloudFileId: var_cloudFileId,
        currentFileUploadSize: var_currentFileUploadSize);
  }

  @protected
  SendingTaskErrorType sse_decode_sending_task_error_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SendingTaskErrorType.values[inner];
  }

  @protected
  SendingTaskState sse_decode_sending_task_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SendingTaskState.values[inner];
  }

  @protected
  SpaceInfo sse_decode_space_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_driveId = sse_decode_String(deserializer);
    var var_devicesRootFolderFileId = sse_decode_String(deserializer);
    var var_thisDeviceFolderFileId = sse_decode_String(deserializer);
    var var_truePassBase64 = sse_decode_String(deserializer);
    return SpaceInfo(
        driveId: var_driveId,
        devicesRootFolderFileId: var_devicesRootFolderFileId,
        thisDeviceFolderFileId: var_thisDeviceFolderFileId,
        truePassBase64: var_truePassBase64);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_list_receiving_task_Sse(
      RustStreamSink<List<ReceivingTask>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_receiving_task,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_sending_task_Sse(
      RustStreamSink<List<SendingTask>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_sending_task,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_adrive_user_get_drive_info(
      AdriveUserGetDriveInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userId, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.avatar, serializer);
    sse_encode_String(self.defaultDriveId, serializer);
    sse_encode_opt_String(self.resourceDriveId, serializer);
    sse_encode_opt_String(self.backupDriveId, serializer);
  }

  @protected
  void sse_encode_after_download(AfterDownload self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_box_autoadd_device(Device self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_device(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_download_config(
      DownloadConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_download_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_space_info(
      SpaceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_space_info(self, serializer);
  }

  @protected
  void sse_encode_device(Device self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.folderFileId, serializer);
    sse_encode_i_32(self.deviceType, serializer);
  }

  @protected
  void sse_encode_download_config(
      DownloadConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.downloadTo, serializer);
    sse_encode_after_download(self.afterDownload, serializer);
    sse_encode_i_64(self.taskExpireEsc, serializer);
  }

  @protected
  void sse_encode_file_item(FileItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fileId, serializer);
    sse_encode_String(self.fileName, serializer);
  }

  @protected
  void sse_encode_file_item_type(FileItemType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_device(List<Device> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_device(item, serializer);
    }
  }

  @protected
  void sse_encode_list_file_item(
      List<FileItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_file_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_receiving_task(
      List<ReceivingTask> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_receiving_task(item, serializer);
    }
  }

  @protected
  void sse_encode_list_selection_file(
      List<SelectionFile> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_selection_file(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sending_task(
      List<SendingTask> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sending_task(item, serializer);
    }
  }

  @protected
  void sse_encode_login_info(LoginInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_login_state(self.state, serializer);
  }

  @protected
  void sse_encode_login_state(LoginState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_download_config(
      DownloadConfig? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_download_config(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_space_info(
      SpaceInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_space_info(self, serializer);
    }
  }

  @protected
  void sse_encode_receiving_task(ReceivingTask self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.taskId, serializer);
    sse_encode_String(self.driveId, serializer);
    sse_encode_String(self.fileId, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_String(self.filePath, serializer);
    sse_encode_file_item_type(self.fileItemType, serializer);
    sse_encode_receiving_task_state(self.taskState, serializer);
    sse_encode_String(self.errorMsg, serializer);
  }

  @protected
  void sse_encode_receiving_task_state(
      ReceivingTaskState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_selection_file(SelectionFile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.path, serializer);
    sse_encode_file_item_type(self.fileItemType, serializer);
  }

  @protected
  void sse_encode_sending_task(SendingTask self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.taskId, serializer);
    sse_encode_device(self.device, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_String(self.filePath, serializer);
    sse_encode_file_item_type(self.fileItemType, serializer);
    sse_encode_sending_task_state(self.taskState, serializer);
    sse_encode_sending_task_error_type(self.errorType, serializer);
    sse_encode_String(self.errorMsg, serializer);
    sse_encode_String(self.cloudFileId, serializer);
    sse_encode_i_64(self.currentFileUploadSize, serializer);
  }

  @protected
  void sse_encode_sending_task_error_type(
      SendingTaskErrorType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_sending_task_state(
      SendingTaskState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_space_info(SpaceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.driveId, serializer);
    sse_encode_String(self.devicesRootFolderFileId, serializer);
    sse_encode_String(self.thisDeviceFolderFileId, serializer);
    sse_encode_String(self.truePassBase64, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
